# streamlit_app.py

import streamlit as st
import pandas as pd
import time

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from utils.data_processor import process_uploaded_file
from utils.visualization import generate_wordcloud, generate_graphs
from utils.api_client import get_categories, get_subcategories
from config.settings import API_URL_UPLOAD
from utils.api_client import upload_original_file, update_processed_file

# === UI ===
st.set_page_config(page_title="–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", layout="wide")
st.title("–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")



# === –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ===
with st.sidebar:
    st.header("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    categories = get_categories()
    for category in categories:
        with st.expander(f"{category['emoji']} {category['name']}"):
            subcategories = get_subcategories(category['identifier'])
            filtered = [s for s in subcategories if search_term.lower() in s["name"].lower() or not search_term]
            
            # –°—Ç–∏–ª—å –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ popover –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            st.markdown("""
                <style>
                p {

                        text-align: left !important;
                    }
                    .st-emotion-cache-qm7g72 {
                        font-size: 0rem !important;
                    }
                </style>
            """, unsafe_allow_html=True)
                        
            for subcat in filtered:
                with st.popover(subcat["name"]):
                    st.markdown(subcat["description"])

# === –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.markdown("## –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º:")
st.markdown("""
1Ô∏è‚É£ **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª**  
   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.csv`. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.

2Ô∏è‚É£ **–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏**  
   –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.

3Ô∏è‚É£ **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**  
   –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞. –¢–∞–∫–∂–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª.
""")

if 'processed_df' not in st.session_state:
    st.session_state.processed_df = None

uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"], label_visibility="collapsed")

if uploaded_file is not None:
    if st.button("–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        try:
            df = pd.read_csv(uploaded_file)

            file_info = upload_original_file(
                uploaded_file.getvalue(),
                uploaded_file.name,
                API_URL_UPLOAD
            )

            file_id = file_info['id'] if file_info else None

            status_text = st.empty()
            progress_bar = st.progress(0)

            status_text.info("–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏...")
            time.sleep(0.5)
            processed_df = process_uploaded_file(df)
            progress_bar.progress(33)

            status_text.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤...")

            
            wordcloud_fig = generate_wordcloud(processed_df)

            fig1, fig2 = generate_graphs(processed_df)
            progress_bar.progress(66)


            status_text.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            time.sleep(0.5)
            progress_bar.progress(100)

            if file_id:
                update_processed_file(file_id, processed_df, API_URL_UPLOAD)

            st.session_state.update({
                'processed_df': processed_df,
                'wordcloud_fig': wordcloud_fig,
                'fig1': fig1,
                'fig2': fig2
            })

            status_text.empty()
            progress_bar.empty()
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ session_state
if st.session_state.processed_df is not None:
    processed_df = st.session_state.processed_df

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    csv_ready_df = processed_df[['text', 'predicted_labels']]
    csv_data = csv_ready_df.to_csv(index=False).encode()
    st.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
        data=csv_data,
        file_name="processed_data.csv",
        mime="text/csv",
    )

    st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫):")

    
    #st.dataframe(processed_df[['text', 'predicted_labels']].head(10))
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–∫ –≤ HTML-–±—ç–π–¥–∂–∏
    def labels_to_badges(labels):
        if isinstance(labels, str):
            labels = labels.split(';')  # –µ—Å–ª–∏ –º–µ—Ç–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        badges = ''.join(
            [f'<span style="margin:2px 4px; padding:4px 8px; background-color:#f0f2f6; border-radius:12px; display:inline-block; min-width:100px; text-align:left;">{label}</span>' 
            for label in labels]
        )
        return badges

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df = processed_df[['text', 'predicted_labels']].head(10).copy()
    display_df['predicted_labels'] = display_df['predicted_labels'].apply(labels_to_badges)
    display_df.columns = ['–¢–µ–∫—Å—Ç', '–ú–µ—Ç–∫–∏']

    # –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    st.html('''
        <style>
        .badge-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 0px !important;
        }
        .badge-table th, .badge-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        .badge-table tr:hover {
            background-color: #f9f9f9;
        }

        .st-emotion-cache-16tyu1 th {
            text-align: left;
        }

        td {
            vertical-align: top;
        }


        </style>
    ''')

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DataFrame –≤ HTML –∏ –≤—ã–≤–æ–¥
    html_table = display_df.to_html(index=False, escape=False)
    st.markdown(f'<table class="badge-table">{html_table}</table>', unsafe_allow_html=True)



    # –ì—Ä–∞—Ñ–∏–∫–∏
    if st.session_state.wordcloud_fig:
        st.markdown("#### ‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤")
        st.plotly_chart(wordcloud_fig, use_container_width=True)

    if st.session_state.fig1:
        st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        st.plotly_chart(fig1, use_container_width=True)
        st.markdown("#### üìà –¢–æ–ø-10 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        st.plotly_chart(fig2, use_container_width=True)
        