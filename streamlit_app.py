import streamlit as st
import requests
import pandas as pd

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_URL_UPLOAD = "http://localhost:8000/api/up_fles/"  # –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ Django
API_URL_CATEGORIES = "http://localhost:8000/api/categorys/"
API_URL_SUBCATEGORIES = "http://localhost:8000/api/subcategorys/"

# === UI ===
st.set_page_config(page_title="–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", layout="wide")
st.title("–°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

# === –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ===
with st.sidebar:
    st.header("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    st.markdown("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö:")
    search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    try:
        response = requests.get(API_URL_CATEGORIES)
        if response.status_code == 200:
            categories = response.json()
        else:
            categories = []
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        categories = []

    for category in categories:
        with st.expander(f"{category['emoji']} {category['name']}"):
            try:
                subcat_response = requests.get(
                    f"{API_URL_SUBCATEGORIES}?category={category['identifier']}"
                )
                if subcat_response.status_code == 200:
                    subcategories = subcat_response.json()
                else:
                    subcategories = []
            except:
                subcategories = []

            filtered_subcats = [
                s for s in subcategories
                if search_term.lower() in s["name"].lower() or not search_term
            ]

            if not filtered_subcats:
                st.markdown("*–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*")
            else:
                for subcat in filtered_subcats:
                    with st.popover(subcat["name"]):
                        st.markdown(subcat["description"])

# === –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ===
st.markdown("## –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º:")
st.markdown("""
1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª**  
   –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ `.csv`. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.

2. **–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏**  
   –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–Ω—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ.

3. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã**  
   –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞. –¢–∞–∫–∂–µ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª.
""")

st.markdown("### –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"], label_visibility="collapsed")

if uploaded_file is not None:
    if st.button("–ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        files = {"file": uploaded_file.getvalue()}
        progress_bar = st.progress(0)
        status_text = st.empty()

        try:
            status_text.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
            response = requests.post(API_URL_UPLOAD, files=files)

            if response.status_code == 200:
                result = response.json()
                for percent_complete in range(0, 100, 10):
                    time.sleep(0.2)
                    progress_bar.progress(percent_complete + 10)
                status_text.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

                # === –¢–∞–±–ª–∏—Ü–∞ —Å –ø–µ—Ä–≤—ã–º–∏ 10 —Å—Ç—Ä–æ–∫–∞–º–∏ ===
                st.markdown("## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫):")
                df = pd.DataFrame(result["preview"])
                st.dataframe(df.head(10))

                # === –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ===
                download_url = result.get("download_url")
                if download_url:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
                        data=requests.get(download_url).content,
                        file_name="processed_data.csv",
                        mime="text/csv"
                    )

                # === –ì—Ä–∞—Ñ–∏–∫–∏ ===
                st.markdown("## –ì—Ä–∞—Ñ–∏–∫–∏")
                cols = st.columns(3)

                if result.get("wordcloud_url"):
                    with cols[0]:
                        st.markdown("#### ‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤")
                        st.image(result["wordcloud_url"], use_column_width=True)

                if result.get("graph1_url"):
                    with cols[1]:
                        st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                        st.image(result["graph1_url"], use_column_width=True)

                if result.get("graph2_url"):
                    with cols[2]:
                        st.markdown("#### üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                        st.image(result["graph2_url"], use_column_width=True)

            else:
                st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                st.json(response.text)

        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å API: {str(e)}")